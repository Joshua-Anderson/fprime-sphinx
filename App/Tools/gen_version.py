#!/usr/bin/env python3

"""
version.py

Generates a FswVersion.hpp with a project build version string
"""
__author__ = "vwong"


import argparse
import subprocess
import datetime
import os
import sys

VERSION_SRC_TEMPLATE = """\
// This file is autogenerated

const char* FSW_VERSION = "{}";
"""

def find_ancestor(ancestor, path):
    """
    Returns the absolute path to the specified ancestor directory of the given
    path. Returns empty string if not found.
    """
    ancestors = path.split(os.sep)
    idx = ancestors.index(ancestor)
    if idx >= 0:
        return os.sep.join(ancestors[:idx+1])
    else:
        return ""

def make_version_str(repo_name):
    """
    Returns a version string in the format of
    <repo-branch-name>_<commit-short-hash>_<datetime>
    """
    repo_path = find_ancestor(repo_name, os.getcwd())
    if not repo_path:
        sys.stderr.write("ERROR: {}\n".format(msg))
        sys.exit(1)

    branch = subprocess.check_output(["git", "rev-parse", "--symbolic-full-name", "HEAD"], cwd=repo_path).strip()
    branch = str(branch, "utf-8")
    
    if branch.startswith("refs"):
        branch = branch.split("/")[-1]
    elif branch == "HEAD":
        try:
            branch = subprocess.check_output(["git", "describe"], cwd=repo_path).strip()
        except:
            branch = "DETACHED"
    sha = subprocess.check_output(["git", "rev-parse", "--short", "HEAD"], cwd=repo_path).strip()
    datetime_str = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S_%f")
    version = "{}_{}_{}".format(branch, sha, datetime_str)
    return version

def parse_args():
    """
    Parse command line arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("output", help="filename to output version file to")
    parser.add_argument("-r", "--repo", dest="repo", default="App",
        help="repo to retrieve branch/commit info from (default: %(default)s)")
    return parser.parse_args()

def main():
    args = parse_args()
    version_str = make_version_str(repo_name=args.repo)
    version_src = VERSION_SRC_TEMPLATE.format(version_str)
    try:
        with open(args.output, "w") as out:
            out.write(version_src)
    except IOError as e:
        sys.stderr.write("ERROR: {}\n".format(e))
        sys.exit(1)

if __name__ == "__main__":
    main()
